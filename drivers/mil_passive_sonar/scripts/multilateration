#!/usr/bin/python

from __future__ import division

import numpy as np
import rospy
from geometry_msgs.msg import Vector3Stamped
from mil_ros_tools import rosmsg_to_numpy, numpy_to_point
from collections import deque
from nav_msgs.msg import Odometry
import tf2_ros
from tf2_geometry_msgs import Vector3Stamped, PointStamped
from std_msgs.msg import Header
from geometry_msgs.msg import PointStamped, Vector3
from mil_passive_sonar.srv import FindPinger, FindPingerResponse
from std_srvs.srv import SetBool, SetBoolResponse


class MultilaterationNode(object):
    '''
    Node which observes the heading to the pinger from various observation points
    and predicts the absolute position from this data.
    '''
    def __init__(self):
        self.tfBuffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tfBuffer)
        buffer_len = rospy.get_param('~buffer_size', default=10)
        self.vec_samples = deque(maxlen=buffer_len)
        self.enabled = False
        self.global_fame = 'enu'
        self.heading_sub = rospy.Subscriber('/hydrophones/direction',
                Vector3Stamped, self.heading_cb, queue_size=10)
        self.position_pub = rospy.Publisher('/hydrophones/position',
                PointStamped, queue_size=1)
        self.enable_srv = rospy.Service('~enable', SetBool,
                self.enable_cb)

    def enable_cb(self, req):
        if req.data is not self.enabled:
            self.vec_samples.clear()
        self.enabled = req.data
        return SetBoolResponse(success=True)

    def heading_cb(self, p_message):
        if not self.enabled:
            return
        try:
            transformed_vec = self.tfBuffer.transform(p_message,
                    self.global_fame, rospy.Duration(2))
            transformed_origin = self.tfBuffer.lookup_transform('enu',
                    p_message.header.frame_id, p_message.header.stamp,
                    rospy.Duration(2))
            vec = rosmsg_to_numpy(transformed_vec.vector)
            vec = vec / np.linalg.norm(vec)
            origin = \
                rosmsg_to_numpy(transformed_origin.transform.translation)
        except tf2_ros.TransformException, e:
            rospy.logwarn('TF Exception: {}'.format(e))
            return
        self.vec_samples.append((origin, origin + vec))
        if len(self.vec_samples) == self.vec_samples.maxlen:
            self.publish_position()

    def publish_position(self):
        line_array = np.array([(p[0][0], p[0][1], p[1][0], p[1][1]) for p in self.vec_samples])
        where = self.ls_line_intersection2d(line_array)
        ps = PointStamped()
        ps.header.stamp = rospy.Time.now()
        ps.point = numpy_to_point(where)
        self.position_pub.publish(ps)

    def ls_line_intersection2d(self, line_array):
        """
        Find the intersection of lines in the least-squares sense.
        start - Nx3 numpy array of start points
        end - Nx3 numpy array of end points
        https://en.wikipedia.org/wiki/Line-line_intersection#In_two_dimensions_2
        """
        def line_segment_norm(line_end_pts):
            assert len(line_end_pts) == 4
            return np.linalg.norm(line_end_pts[2:] - line_end_pts[:2])

        begin_pts = line_array[:, :2]
        diffs = line_array[:, 2:4] - begin_pts
        norms = np.apply_along_axis(line_segment_norm, 1, line_array).reshape(diffs.shape[0], 1)
        rot_left_90 = np.array([[0, -1], [1, 0]])
        perp_unit_vecs = np.apply_along_axis(lambda unit_diffs: rot_left_90.dot(unit_diffs), 1, diffs / norms)
        A_sum = np.zeros((2, 2))
        Ap_sum = np.zeros((2, 1))

        for x, y in zip(begin_pts, perp_unit_vecs):
            begin = x.reshape(2, 1)
            perp_vec = y.reshape(2, 1)
            A = perp_vec.dot(perp_vec.T)
            Ap = A.dot(begin)
            A_sum += A
            Ap_sum += Ap

        return np.linalg.inv(A_sum).dot(Ap_sum)


if __name__ == '__main__':
    rospy.init_node('multilateration')
    MultilaterationNode()
    rospy.spin()

